{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onSearchChange","event","target","value","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_containers_App"],"mappings":"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","file":"static/js/main.4eb28662.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n              <div>\r\n              <h2>{name}</h2>\r\n              <p>{email}</p>\r\n              </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                \r\n                    return ( <Card\r\n                    \r\n                    key={i}\r\n                     \r\n                    id={robots[i].id} \r\n                    \r\n                    name={robots[i].name} \r\n                    \r\n                    email={robots[i].email} \r\n                    \r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    \r\n    return (\r\n        <div className='pa2'>\r\n        <input\r\n\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        \r\n        type='search'\r\n\r\n        placeholder='search robots' \r\n\r\n        onChange={searchChange}\r\n        \r\n        />\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n                hasError: false\r\n        }\r\n    }\r\n\r\n\r\n    componentDidCatch(error, info) {\r\n            this.setState({ hasError: true })\r\n    }\r\n\r\nrender() {\r\n    if (this.state.hasError) {\r\n        return <h1>Oops. That is not good.</h1>\r\n    }\r\n    return this.props.children\r\n}\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        \r\n        .then(response=> response.json())\r\n       \r\n        .then(users => this.setState({ robots: users}));\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value })\r\n    }\r\n\r\n    render() {\r\n        const { robots, searchfield } = this.state;\r\n        const filteredRobots = robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        })\r\n        return !robots.length ?\r\n        <h1>Loading</h1> :\r\n        (\r\n            <div className='tc'>\r\n    \r\n            <h1 className='f1'>Robot Match!</h1>\r\n    \r\n            <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                    <CardList robots={filteredRobots}/>\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n        }\r\n    }\r\n\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n        <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}